version: '3.8'

services:
  # Frontend - Next.js Production Build
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.prod
      target: production
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://${DOMAIN_NAME}/api
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - frontend_cache:/app/.next/cache
    networks:
      - youtube-automation-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - backend
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Backend - FastAPI Production
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
      target: production
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - YOUTUBE_CLIENT_ID=${YOUTUBE_CLIENT_ID}
      - YOUTUBE_CLIENT_SECRET=${YOUTUBE_CLIENT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=INFO
    volumes:
      - ./configs:/app/configs:ro
      - ./plugins:/app/plugins
      - youtube-models:/app/models
      - uploaded-videos:/app/uploads
      - backup-data:/app/backups:ro
    networks:
      - youtube-automation-internal
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.backend-ratelimit.ratelimit.burst=100"
      - "traefik.http.middlewares.backend-ratelimit.ratelimit.average=10"
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup/postgres_backups:/backups
      - ./monitoring/postgres_exporter.sql:/docker-entrypoint-initdb.d/postgres_exporter.sql:ro
    networks:
      - youtube-automation-internal
      - monitoring
    ports:
      - "127.0.0.1:5432:5432"  # Only localhost access
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis - Production
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
    volumes:
      - redis_data:/data
      - ./backup/redis_backups:/backups
    networks:
      - youtube-automation-internal
      - monitoring
    ports:
      - "127.0.0.1:6379:6379"  # Only localhost access
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker - Production
  celery-worker:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
      target: production
    restart: unless-stopped
    command: >
      celery -A main.celery worker 
      --loglevel=INFO 
      --concurrency=4
      --max-tasks-per-child=1000
      --time-limit=3600
      --soft-time-limit=3300
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - YOUTUBE_CLIENT_ID=${YOUTUBE_CLIENT_ID}
      - YOUTUBE_CLIENT_SECRET=${YOUTUBE_CLIENT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./configs:/app/configs:ro
      - ./plugins:/app/plugins
      - youtube-models:/app/models
      - uploaded-videos:/app/uploads
      - backup-data:/app/backups:ro
    networks:
      - youtube-automation-internal
      - monitoring
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "celery", "-A", "main.celery", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Celery Beat - Scheduler
  celery-beat:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
      target: production
    restart: unless-stopped
    command: celery -A main.celery beat --loglevel=INFO --pidfile=/tmp/celerybeat.pid
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./configs:/app/configs:ro
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - youtube-automation-internal
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1  # Only one beat scheduler needed
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Flower - Celery Monitoring
  flower:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
      target: production
    restart: unless-stopped
    command: >
      celery -A main.celery flower 
      --port=5555 
      --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
      --url_prefix=flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - youtube-automation-internal
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/flower`)"
      - "traefik.http.routers.flower.tls.certresolver=letsencrypt"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"
      - "traefik.http.routers.flower.middlewares=flower-auth"
      - "traefik.http.middlewares.flower-auth.basicauth.users=${FLOWER_USER}:${FLOWER_PASSWORD_HASH}"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # Traefik - Reverse Proxy with SSL
  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.debug=false"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=youtube-automation-internal"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/certificates/acme.json"
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"  # Dashboard - localhost only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certificates:/certificates
      - ./nginx/traefik.yml:/etc/traefik/dynamic.yml:ro
    networks:
      - youtube-automation-internal
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASH}"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://${DOMAIN_NAME}/prometheus'
      - '--web.route-prefix=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.middlewares=prometheus-auth"
      - "traefik.http.middlewares.prometheus-auth.basicauth.users=${PROMETHEUS_USER}:${PROMETHEUS_PASSWORD_HASH}"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=https://${DOMAIN_NAME}/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_EXPORTER_USER}:${POSTGRES_EXPORTER_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - monitoring
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.54.0
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - monitoring
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    volumes:
      - backup_data:/backups
      - ./backup/scripts:/scripts:ro
      - postgres_data:/postgres_data:ro
      - redis_data:/redis_data:ro
      - uploaded-videos:/app_uploads:ro
    networks:
      - youtube-automation-internal
      - monitoring
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  traefik_certificates:
    driver: local
  youtube_models:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: ./models
  uploaded_videos:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: ./uploads
  backup_data:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: ./backup/data
  frontend_cache:
    driver: local
  celery_beat_data:
    driver: local

networks:
  youtube-automation-internal:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.21.0.0/16
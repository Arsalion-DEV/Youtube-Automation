"""
Enhanced YouTube Automation Platform Main Application
Integrates all multi-platform publishing features with real-time updates
"""

import os
import asyncio
import logging
from contextlib import asynccontextmanager
from typing import Dict, Any, List

from fastapi import FastAPI, Depends, HTTPException, WebSocket, WebSocketDisconnect, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import JSONResponse
import uvicorn

# Import existing modules
from auth import get_current_user
from auth_routes import auth_router
from ai_wizard_routes import wizard_router
from social_media_routes import router as social_router
from social_media_manager import SocialMediaManager
from realtime_publisher import RealtimePublisher
from oauth_config import get_oauth_config, validate_oauth_config

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize services
social_manager = SocialMediaManager()
realtime_publisher = RealtimePublisher(social_manager)
security = HTTPBearer()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan events"""
    # Startup
    logger.info("Starting Enhanced YouTube Automation Platform...")
    
    # Initialize database
    social_manager.initialize_database()
    logger.info("Database initialized")
    
    # Load OAuth configurations
    oauth_status = {}
    platforms = ["facebook", "twitter", "instagram", "tiktok", "linkedin"]
    for platform in platforms:
        oauth_status[platform] = validate_oauth_config(platform)
    
    logger.info(f"OAuth configuration status: {oauth_status}")
    
    yield
    
    # Shutdown
    logger.info("Shutting down Enhanced YouTube Automation Platform...")

# Create FastAPI app
app = FastAPI(
    title="Enhanced YouTube Automation Platform",
    description="Complete multi-platform content automation with real-time publishing",
    version="2.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://13.60.77.139:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(auth_router, prefix="/api/auth", tags=["authentication"])
app.include_router(wizard_router, prefix="/api/wizard", tags=["ai-wizard"])
app.include_router(social_router, prefix="/api/social", tags=["social-media"])

# Health check endpoint
@app.get("/health")
async def health_check():
    """Enhanced health check with service status"""
    return {
        "status": "healthy",
        "version": "2.0.0",
        "services": {
            "database": True,
            "social_media_manager": True,
            "realtime_publisher": True,
            "video_processor": True
        },
        "oauth_status": {
            platform: validate_oauth_config(platform) 
            for platform in ["facebook", "twitter", "instagram", "tiktok", "linkedin"]
        }
    }

# WebSocket endpoint for real-time updates
@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """WebSocket endpoint for real-time publishing updates"""
    connection_manager = realtime_publisher.get_connection_manager()
    connection_id = await connection_manager.connect(websocket, user_id)
    
    try:
        # Send initial connection confirmation
        await websocket.send_text('{"type": "connection", "message": "Connected successfully"}')
        
        while True:
            # Keep connection alive and handle any client messages
            try:
                data = await websocket.receive_text()
                # Handle client messages if needed (ping/pong, etc.)
                if data == "ping":
                    await websocket.send_text('{"type": "pong"}')
            except Exception as e:
                logger.error(f"WebSocket error: {e}")
                break
                
    except WebSocketDisconnect:
        logger.info(f"WebSocket disconnected: {connection_id}")
    finally:
        connection_manager.disconnect(connection_id, user_id)

# Enhanced publishing endpoint with real-time updates
@app.post("/api/social/publish/realtime")
async def publish_content_realtime(
    video: UploadFile = File(...),
    title: str = Form(...),
    description: str = Form(""),
    platforms: str = Form(...),  # JSON string of platform list
    tags: str = Form("[]"),  # JSON string of tags
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """Publish content with real-time status updates"""
    try:
        # Get current user
        user = await get_current_user(credentials.credentials)
        user_id = user["user_id"]
        
        # Parse JSON strings
        import json
        platforms_list = json.loads(platforms)
        tags_list = json.loads(tags)
        
        # Validate platforms
        valid_platforms = ["facebook", "twitter", "instagram", "tiktok", "linkedin", "youtube"]
        invalid_platforms = [p for p in platforms_list if p not in valid_platforms]
        if invalid_platforms:
            raise HTTPException(
                status_code=400, 
                detail=f"Invalid platforms: {invalid_platforms}"
            )
        
        # Save uploaded video
        video_path = f"/tmp/{user_id}_{video.filename}"
        with open(video_path, "wb") as buffer:
            content = await video.read()
            buffer.write(content)
        
        # Start publishing job
        job_id = await realtime_publisher.start_publishing_job(
            user_id=user_id,
            video_path=video_path,
            title=title,
            description=description,
            platforms=platforms_list,
            tags=tags_list
        )
        
        return {
            "success": True,
            "job_id": job_id,
            "message": "Publishing started successfully",
            "websocket_url": f"/ws/{user_id}"
        }
        
    except Exception as e:
        logger.error(f"Publishing error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Get publishing job status
@app.get("/api/social/publishing/status/{job_id}")
async def get_publishing_status(
    job_id: str,
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """Get current status of a publishing job"""
    try:
        user = await get_current_user(credentials.credentials)
        status = await realtime_publisher.get_job_status(job_id)
        
        if not status:
            raise HTTPException(status_code=404, detail="Job not found")
        
        return {
            "success": True,
            "data": status
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting job status: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Retry failed publishing job
@app.post("/api/social/publishing/retry/{job_id}")
async def retry_publishing_job(
    job_id: str,
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """Retry a failed publishing job"""
    try:
        user = await get_current_user(credentials.credentials)
        user_id = user["user_id"]
        
        success = await realtime_publisher.retry_failed_job(job_id, user_id)
        
        if not success:
            raise HTTPException(
                status_code=400, 
                detail="Cannot retry job (max retries exceeded or job not found)"
            )
        
        return {
            "success": True,
            "message": "Publishing job retry started"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error retrying job: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Get all publishing jobs for user
@app.get("/api/social/publishing/jobs")
async def get_user_publishing_jobs(
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """Get all publishing jobs for the current user"""
    try:
        user = await get_current_user(credentials.credentials)
        user_id = user["user_id"]
        
        jobs = social_manager.get_user_publishing_jobs(user_id)
        
        return {
            "success": True,
            "data": {
                "jobs": [
                    {
                        "id": job.id,
                        "title": job.title,
                        "platforms": [p.value for p in job.platforms],
                        "status": job.status,
                        "platform_results": job.platform_results,
                        "created_at": job.created_at.isoformat(),
                        "completed_at": job.completed_at.isoformat() if job.completed_at else None,
                        "progress": 100 if job.status in ["completed", "failed", "partial"] else 0
                    }
                    for job in jobs
                ]
            }
        }
        
    except Exception as e:
        logger.error(f"Error getting user jobs: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# User progress tracking endpoints
@app.get("/api/user/progress/{user_id}")
async def get_user_progress(
    user_id: str,
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """Get user progress data"""
    try:
        user = await get_current_user(credentials.credentials)
        
        # Verify user can access this data
        if user["user_id"] != user_id and not user.get("is_admin", False):
            raise HTTPException(status_code=403, detail="Access denied")
        
        # Get progress from database or return default
        progress_data = social_manager.get_user_progress(user_id)
        
        return {
            "success": True,
            "data": {
                "progress": progress_data or []
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting user progress: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/user/progress/{user_id}")
async def save_user_progress(
    user_id: str,
    progress_data: Dict[str, Any],
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """Save user progress data"""
    try:
        user = await get_current_user(credentials.credentials)
        
        # Verify user can update this data
        if user["user_id"] != user_id and not user.get("is_admin", False):
            raise HTTPException(status_code=403, detail="Access denied")
        
        # Save progress to database
        social_manager.save_user_progress(user_id, progress_data.get("progress", []))
        
        return {
            "success": True,
            "message": "Progress saved successfully"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error saving user progress: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Platform analytics endpoint
@app.get("/api/social/analytics")
async def get_platform_analytics(
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """Get comprehensive platform analytics"""
    try:
        user = await get_current_user(credentials.credentials)
        user_id = user["user_id"]
        
        analytics = social_manager.get_user_analytics(user_id)
        
        return {
            "success": True,
            "data": analytics
        }
        
    except Exception as e:
        logger.error(f"Error getting analytics: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# System status endpoint for monitoring
@app.get("/api/system/status")
async def get_system_status():
    """Get comprehensive system status for monitoring"""
    try:
        active_jobs = len(realtime_publisher.active_jobs)
        total_connections = len(realtime_publisher.connection_manager.active_connections)
        
        return {
            "status": "operational",
            "timestamp": "2025-06-30T19:00:00Z",
            "services": {
                "database": {"status": "healthy", "response_time_ms": 5},
                "video_processor": {"status": "healthy", "ffmpeg_available": True},
                "social_media_manager": {"status": "healthy"},
                "realtime_publisher": {
                    "status": "healthy",
                    "active_jobs": active_jobs,
                    "websocket_connections": total_connections
                }
            },
            "platform_status": {
                platform: {
                    "oauth_configured": validate_oauth_config(platform),
                    "api_healthy": True  # Could add actual API health checks
                }
                for platform in ["facebook", "twitter", "instagram", "tiktok", "linkedin"]
            }
        }
        
    except Exception as e:
        logger.error(f"Error getting system status: {e}")
        return {
            "status": "degraded",
            "error": str(e)
        }

if __name__ == "__main__":
    uvicorn.run(
        "enhanced_main:app",
        host="0.0.0.0",
        port=8001,
        reload=True,
        log_level="info"
    )